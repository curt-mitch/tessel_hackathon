
ambient-attx4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005be  00000652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800062  00800062  00000654  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000907  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000317  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000327  00000000  00000000  00001a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000572  00000000  00000000  00002282  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	be c1       	rjmp	.+892    	; 0x380 <__vector_1>
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	2e c0       	rjmp	.+92     	; 0x64 <__bad_interrupt>
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	2c c0       	rjmp	.+88     	; 0x64 <__bad_interrupt>
   c:	1d c1       	rjmp	.+570    	; 0x248 <__vector_6>
   e:	2a c0       	rjmp	.+84     	; 0x64 <__bad_interrupt>
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	29 c0       	rjmp	.+82     	; 0x66 <__vector_9>
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	26 c0       	rjmp	.+76     	; 0x64 <__bad_interrupt>
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	24 c0       	rjmp	.+72     	; 0x64 <__bad_interrupt>
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	22 c0       	rjmp	.+68     	; 0x64 <__bad_interrupt>
  20:	2d c0       	rjmp	.+90     	; 0x7c <__vector_16>
  22:	e5 c1       	rjmp	.+970    	; 0x3ee <__vector_1+0x6e>
  24:	f4 c1       	rjmp	.+1000   	; 0x40e <__vector_1+0x8e>
  26:	f5 c1       	rjmp	.+1002   	; 0x412 <__vector_1+0x92>
  28:	f4 c1       	rjmp	.+1000   	; 0x412 <__vector_1+0x92>
  2a:	31 c2       	rjmp	.+1122   	; 0x48e <__vector_1+0x10e>
  2c:	30 c2       	rjmp	.+1120   	; 0x48e <__vector_1+0x10e>
  2e:	50 c2       	rjmp	.+1184   	; 0x4d0 <__vector_1+0x150>
  30:	e0 c1       	rjmp	.+960    	; 0x3f2 <__vector_1+0x72>

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf ed       	ldi	r28, 0xDF	; 223
  38:	cd bf       	out	0x3d, r28	; 61

0000003a <__do_copy_data>:
  3a:	10 e0       	ldi	r17, 0x00	; 0
  3c:	a0 e6       	ldi	r26, 0x60	; 96
  3e:	b0 e0       	ldi	r27, 0x00	; 0
  40:	ee eb       	ldi	r30, 0xBE	; 190
  42:	f5 e0       	ldi	r31, 0x05	; 5
  44:	02 c0       	rjmp	.+4      	; 0x4a <__SREG__+0xb>
  46:	05 90       	lpm	r0, Z+
  48:	0d 92       	st	X+, r0
  4a:	a2 36       	cpi	r26, 0x62	; 98
  4c:	b1 07       	cpc	r27, r17
  4e:	d9 f7       	brne	.-10     	; 0x46 <__SREG__+0x7>

00000050 <__do_clear_bss>:
  50:	10 e0       	ldi	r17, 0x00	; 0
  52:	a2 e6       	ldi	r26, 0x62	; 98
  54:	b0 e0       	ldi	r27, 0x00	; 0
  56:	01 c0       	rjmp	.+2      	; 0x5a <.do_clear_bss_start>

00000058 <.do_clear_bss_loop>:
  58:	1d 92       	st	X+, r1

0000005a <.do_clear_bss_start>:
  5a:	a8 39       	cpi	r26, 0x98	; 152
  5c:	b1 07       	cpc	r27, r17
  5e:	e1 f7       	brne	.-8      	; 0x58 <.do_clear_bss_loop>
  60:	a1 d2       	rcall	.+1346   	; 0x5a4 <main>
  62:	ab c2       	rjmp	.+1366   	; 0x5ba <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <__vector_9>:
 *  results in one clock period on the clock pin and for the USI counter.

 */

ISR(TIM0_COMPA_vect)
{
  66:	1f 92       	push	r1
  68:	0f 92       	push	r0
  6a:	0f b6       	in	r0, 0x3f	; 63
  6c:	0f 92       	push	r0
  6e:	11 24       	eor	r1, r1
	USICR |= (1<<USITC);	// Toggle clock output pin.
  70:	68 9a       	sbi	0x0d, 0	; 13
}
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <__vector_16>:

 */

ISR(USI_OVF_vect)

{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24

	// Master must now disable the compare match interrupt

	// to prevent more USI counter clocks.

	if( spiX_status.masterMode == 1 ) {
  88:	80 91 97 00 	lds	r24, 0x0097
  8c:	80 ff       	sbrs	r24, 0
  8e:	03 c0       	rjmp	.+6      	; 0x96 <__vector_16+0x1a>

		TIMSK0 &= ~(1<<OCIE0A);
  90:	89 b7       	in	r24, 0x39	; 57
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	89 bf       	out	0x39, r24	; 57

	

	// Update flags and clear USI counter

	USISR = (1<<USIOIF);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	8e b9       	out	0x0e, r24	; 14

	spiX_status.transferComplete = 1;
  9a:	80 91 97 00 	lds	r24, 0x0097
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	80 93 97 00 	sts	0x0097, r24



	// Copy USIDR to buffer to prevent overwrite on next transfer.

	storedUSIDR = USIDR;
  a4:	8f b1       	in	r24, 0x0f	; 15
  a6:	80 93 96 00 	sts	0x0096, r24

}
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <spiX_initmaster>:

{

	// Configure port directions.

	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Outputs.
  b6:	9a b3       	in	r25, 0x1a	; 26
  b8:	90 63       	ori	r25, 0x30	; 48
  ba:	9a bb       	out	0x1a, r25	; 26

	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                      // Inputs.
  bc:	d6 98       	cbi	0x1a, 6	; 26

	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                       // Pull-ups.
  be:	de 9a       	sbi	0x1b, 6	; 27

	// Configure USI to 3-wire master mode with overflow interrupt.

	USICR = (1<<USIOIE) | (1<<USIWM0) |

	        (1<<USICS1) | (spi_mode<<USICS0) |
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25

	

	// Configure USI to 3-wire master mode with overflow interrupt.

	USICR = (1<<USIOIE) | (1<<USIWM0) |
  ca:	8a 65       	ori	r24, 0x5A	; 90
  cc:	8d b9       	out	0x0d, r24	; 13

	// Enable 'Clear Timer on Compare match' and init prescaler.

	// This made it impossible to get interrupts for some reason
	// TCCR0A = (1<<WGM01);
	TCCR0B = TC0_PS_SETTING;
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	83 bf       	out	0x33, r24	; 51
	

	// Init Output Compare Register.

	OCR0A = TC0_COMPARE_VALUE;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	86 bf       	out	0x36, r24	; 54

	

	// Init driver status register.

	spiX_status.masterMode       = 1;
  d6:	80 91 97 00 	lds	r24, 0x0097
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 93 97 00 	sts	0x0097, r24

	spiX_status.transferComplete = 0;
  e0:	80 91 97 00 	lds	r24, 0x0097
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	80 93 97 00 	sts	0x0097, r24

	spiX_status.writeCollision   = 0;
  ea:	80 91 97 00 	lds	r24, 0x0097
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	80 93 97 00 	sts	0x0097, r24
	

	storedUSIDR = 0;
  f4:	10 92 96 00 	sts	0x0096, r1
  f8:	08 95       	ret

000000fa <spiX_initslave>:

{

	// Configure port directions.

	USI_DIR_REG |= (1<<USI_DATAOUT_PIN);                      // Outputs.
  fa:	d5 9a       	sbi	0x1a, 5	; 26

	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN); // Inputs.
  fc:	d6 98       	cbi	0x1a, 6	; 26

	USI_OUT_REG |= (1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN);  // Pull-ups.
  fe:	9b b3       	in	r25, 0x1b	; 27
 100:	90 65       	ori	r25, 0x50	; 80
 102:	9b bb       	out	0x1b, r25	; 27

	// Configure USI to 3-wire slave mode with overflow interrupt.

	USICR = (1<<USIOIE) | (1<<USIWM0) |

	        (1<<USICS1) | (spi_mode<<USICS0);
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25

	

	// Configure USI to 3-wire slave mode with overflow interrupt.

	USICR = (1<<USIOIE) | (1<<USIWM0) |
 10e:	88 65       	ori	r24, 0x58	; 88
 110:	8d b9       	out	0x0d, r24	; 13

	

	// Init driver status register.

	spiX_status.masterMode       = 0;
 112:	80 91 97 00 	lds	r24, 0x0097
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	80 93 97 00 	sts	0x0097, r24

	spiX_status.transferComplete = 0;
 11c:	80 91 97 00 	lds	r24, 0x0097
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	80 93 97 00 	sts	0x0097, r24

	spiX_status.writeCollision   = 0;
 126:	80 91 97 00 	lds	r24, 0x0097
 12a:	8b 7f       	andi	r24, 0xFB	; 251
 12c:	80 93 97 00 	sts	0x0097, r24

	

	storedUSIDR = 0;
 130:	10 92 96 00 	sts	0x0096, r1
 134:	08 95       	ret

00000136 <spiX_put>:

	// Check if transmission in progress,

	// i.e. USI counter unequal to zero.

	if( (USISR & 0x0F) != 0 ) {
 136:	9e b1       	in	r25, 0x0e	; 14
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	39 f0       	breq	.+14     	; 0x14a <spiX_put+0x14>

		// Indicate write collision and return.

		spiX_status.writeCollision = 1;
 13c:	80 91 97 00 	lds	r24, 0x0097
 140:	84 60       	ori	r24, 0x04	; 4
 142:	80 93 97 00 	sts	0x0097, r24

		return 0;
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret

	}

	// Reinit flags.

	spiX_status.transferComplete = 0;
 14a:	90 91 97 00 	lds	r25, 0x0097
 14e:	9d 7f       	andi	r25, 0xFD	; 253
 150:	90 93 97 00 	sts	0x0097, r25

	spiX_status.writeCollision = 0;
 154:	90 91 97 00 	lds	r25, 0x0097
 158:	9b 7f       	andi	r25, 0xFB	; 251
 15a:	90 93 97 00 	sts	0x0097, r25



	// Put data in USI data register.

	USIDR = val;
 15e:	8f b9       	out	0x0f, r24	; 15

	

	// Master should now enable compare match interrupts.

	if( spiX_status.masterMode == 1 ) {
 160:	80 91 97 00 	lds	r24, 0x0097
 164:	80 ff       	sbrs	r24, 0
 166:	06 c0       	rjmp	.+12     	; 0x174 <spiX_put+0x3e>

		TIFR0 |= (1<<OCF0A);   // Clear compare match flag.
 168:	88 b7       	in	r24, 0x38	; 56
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	88 bf       	out	0x38, r24	; 56

		TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.
 16e:	89 b7       	in	r24, 0x39	; 57
 170:	82 60       	ori	r24, 0x02	; 2
 172:	89 bf       	out	0x39, r24	; 57

	}



	if( spiX_status.writeCollision == 0 ) return 1;
 174:	80 91 97 00 	lds	r24, 0x0097
 178:	82 fb       	bst	r24, 2
 17a:	88 27       	eor	r24, r24
 17c:	80 f9       	bld	r24, 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	89 27       	eor	r24, r25

	return 0;

}
 182:	08 95       	ret

00000184 <spiX_get>:

{

	return storedUSIDR;

}
 184:	80 91 96 00 	lds	r24, 0x0096
 188:	08 95       	ret

0000018a <spiX_wait>:

void spiX_wait(void)

{

	do {} while( spiX_status.transferComplete == 0 );
 18a:	80 91 97 00 	lds	r24, 0x0097
 18e:	81 ff       	sbrs	r24, 1
 190:	fc cf       	rjmp	.-8      	; 0x18a <spiX_wait>

}
 192:	08 95       	ret

00000194 <setupIO>:

}

void setupIO(void) {
  // Make the "decibel" pin an input
  cbi(DDRA, SOUND_PIN);
 194:	d1 98       	cbi	0x1a, 1	; 26

  // Make the ambient light as input
  cbi(DDRA, LIGHT_PIN);
 196:	d3 98       	cbi	0x1a, 3	; 26

  // Make the Interrupt pin an output
  sbi(DDRB, IRQ_PIN);
 198:	b9 9a       	sbi	0x17, 1	; 23

  // Pull it low
  cbi(PORTB, IRQ_PIN);
 19a:	c1 98       	cbi	0x18, 1	; 24

  // Set MOSI as an input
  cbi(DDRA, MOSI);
 19c:	d6 98       	cbi	0x1a, 6	; 26
 19e:	08 95       	ret

000001a0 <enableSPI>:
}

void enableSPI(void) {
  // configure: interrupt on INT0 pin falling edge
  MCUCR = (1<<ISC01);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	85 bf       	out	0x35, r24	; 53

  // enable interrupt
  sbi(GIMSK, INT0);
 1a4:	8b b7       	in	r24, 0x3b	; 59
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	8b bf       	out	0x3b, r24	; 59

  // Set CS as INPUT
  cbi(DDRB, CS_PIN);
 1aa:	ba 98       	cbi	0x17, 2	; 23

  // Set up pull up to keep CS high
  sbi(PORTB, CS_PIN);
 1ac:	c2 9a       	sbi	0x18, 2	; 24

  // disable spi counter overflow enable
  USICR&= ~(1<<USIOIE);
 1ae:	6e 98       	cbi	0x0d, 6	; 13
  USICR&= ~(1<<USIWM0);
 1b0:	6c 98       	cbi	0x0d, 4	; 13
 1b2:	08 95       	ret

000001b4 <setupTimer>:
}

void setupTimer(void) {
  // Set clock divider to 8 (1MHz)
  sbi(TCCR1B, CS11);
 1b4:	8e b5       	in	r24, 0x2e	; 46
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	8e bd       	out	0x2e, r24	; 46

  // Set the counter to CTC (clear on match)
  sbi(TCCR1B, WGM12);
 1ba:	8e b5       	in	r24, 0x2e	; 46
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	8e bd       	out	0x2e, r24	; 46

  // Set frequency to 5kHz
  // (8000000/8/200) Hz
  OCR1A = 200;
 1c0:	88 ec       	ldi	r24, 0xC8	; 200
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	9b bd       	out	0x2b, r25	; 43
 1c6:	8a bd       	out	0x2a, r24	; 42

  // Allow interrupts on comp a
  sbi(TIMSK1, OCIE1A);
 1c8:	61 9a       	sbi	0x0c, 1	; 12
 1ca:	08 95       	ret

000001cc <prepareADC>:
}

void prepareADC(void) {

  // Make sure the power reduction register isn't set
  cbi(PRR, PRADC);
 1cc:	00 98       	cbi	0x00, 0	; 0

  // Enable ADC by writing ADEN in ADSCRA
  sbi(ADCSRA, ADEN);
 1ce:	37 9a       	sbi	0x06, 7	; 6

  // Set up ADC clock prescalar to 64 (125kHz) by writing ADPS bits of ADSCRA
  ADCSRA |= 6;
 1d0:	86 b1       	in	r24, 0x06	; 6
 1d2:	86 60       	ori	r24, 0x06	; 6
 1d4:	86 b9       	out	0x06, r24	; 6

  // Set reference voltage to AREF by writing to the ADMUX register
  ADMUX = 0;
 1d6:	17 b8       	out	0x07, r1	; 7
  cbi(ADMUX, REFS1);
 1d8:	3f 98       	cbi	0x07, 7	; 7
  sbi(ADMUX, REFS0);
 1da:	3e 9a       	sbi	0x07, 6	; 7
 1dc:	08 95       	ret

000001de <setup>:
}

void setup(void) {

  // Turn off interrupts
  cli();
 1de:	f8 94       	cli

  // Reset buffer locations
  LightBuffer.bufferLocation = 0;
 1e0:	10 92 80 00 	sts	0x0080, r1
  SoundBuffer.bufferLocation = 0;
 1e4:	10 92 95 00 	sts	0x0095, r1

  setupIO();
 1e8:	d5 df       	rcall	.-86     	; 0x194 <setupIO>

  prepareADC();
 1ea:	f0 df       	rcall	.-32     	; 0x1cc <prepareADC>

  enableSPI();
 1ec:	d9 df       	rcall	.-78     	; 0x1a0 <enableSPI>

  setupTimer();
 1ee:	e2 df       	rcall	.-60     	; 0x1b4 <setupTimer>

  // Unleash the interrupts!
  sei();
 1f0:	78 94       	sei
 1f2:	08 95       	ret

000001f4 <analogRead>:
uint16_t analogRead(char pin) {

  uint16_t value;

  // Clear lowest five bits
  ADMUX &= 0b11100000;
 1f4:	97 b1       	in	r25, 0x07	; 7
 1f6:	90 7e       	andi	r25, 0xE0	; 224
 1f8:	97 b9       	out	0x07, r25	; 7

  // Set five bits with pin
  ADMUX |= (pin & 0b00011111);
 1fa:	97 b1       	in	r25, 0x07	; 7
 1fc:	8f 71       	andi	r24, 0x1F	; 31
 1fe:	89 2b       	or	r24, r25
 200:	87 b9       	out	0x07, r24	; 7

  // Start the conversion
  sbi(ADCSRA, ADSC);
 202:	36 9a       	sbi	0x06, 6	; 6

  // Wait for the conversion to finish
  while((ADCSRA & (1<<ADSC)) != 0);
 204:	36 99       	sbic	0x06, 6	; 6
 206:	fe cf       	rjmp	.-4      	; 0x204 <analogRead+0x10>

  value = ADCL;
 208:	24 b1       	in	r18, 0x04	; 4

  value += (ADCH << 8);
 20a:	35 b1       	in	r19, 0x05	; 5
 20c:	93 2f       	mov	r25, r19
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	42 0f       	add	r20, r18
 214:	51 1d       	adc	r21, r1

  // Return the 10 bit result
  return value;
}
 216:	ca 01       	movw	r24, r20
 218:	08 95       	ret

0000021a <bufferForCommand>:

volatile DataBuffer bufferForCommand(uint8_t command) {

  if (command == LIGHT_CMD)
  {
    return LightBuffer;
 21a:	25 e1       	ldi	r18, 0x15	; 21
  return value;
}

volatile DataBuffer bufferForCommand(uint8_t command) {

  if (command == LIGHT_CMD)
 21c:	62 30       	cpi	r22, 0x02	; 2
 21e:	19 f4       	brne	.+6      	; 0x226 <bufferForCommand+0xc>
  {
    return LightBuffer;
 220:	ec e6       	ldi	r30, 0x6C	; 108
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <bufferForCommand+0x10>
  }
  else
  {
    return SoundBuffer;
 226:	e1 e8       	ldi	r30, 0x81	; 129
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	dc 01       	movw	r26, r24
 22c:	01 90       	ld	r0, Z+
 22e:	0d 92       	st	X+, r0
 230:	2a 95       	dec	r18
 232:	e1 f7       	brne	.-8      	; 0x22c <bufferForCommand+0x12>
  }
}
 234:	08 95       	ret

00000236 <triggerValueForCommand>:

volatile uint16_t *triggerValueForCommand(uint8_t command) {
  if (command == LIGHT_TRIGGER_CMD) {
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	19 f4       	brne	.+6      	; 0x240 <triggerValueForCommand+0xa>
    return &lightTrigger;
 23a:	28 e6       	ldi	r18, 0x68	; 104
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <triggerValueForCommand+0xe>
  }
  else {
    return &soundTrigger;
 240:	24 e6       	ldi	r18, 0x64	; 100
 242:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 244:	c9 01       	movw	r24, r18
 246:	08 95       	ret

00000248 <__vector_6>:

ISR(TIM1_COMPA_vect) {
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	1f 93       	push	r17
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31

  LightBuffer.buffer[LightBuffer.bufferLocation++] = analogRead(LIGHT_PIN);
 270:	10 91 80 00 	lds	r17, 0x0080
 274:	c1 2f       	mov	r28, r17
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	bc df       	rcall	.-136    	; 0x1f4 <analogRead>
 27c:	fe 01       	movw	r30, r28
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	e4 59       	subi	r30, 0x94	; 148
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	80 83       	st	Z, r24
 28a:	1f 5f       	subi	r17, 0xFF	; 255
 28c:	10 93 80 00 	sts	0x0080, r17

  // If a light trigger has been set and the level is hit
  if (lightTrigger != 0 && LightBuffer.buffer[LightBuffer.bufferLocation - 1] >= lightTrigger) {
 290:	80 91 68 00 	lds	r24, 0x0068
 294:	90 91 69 00 	lds	r25, 0x0069
 298:	89 2b       	or	r24, r25
 29a:	f1 f0       	breq	.+60     	; 0x2d8 <__vector_6+0x90>
 29c:	e0 91 80 00 	lds	r30, 0x0080
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	e6 59       	subi	r30, 0x96	; 150
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	20 81       	ld	r18, Z
 2ac:	31 81       	ldd	r19, Z+1	; 0x01
 2ae:	80 91 68 00 	lds	r24, 0x0068
 2b2:	90 91 69 00 	lds	r25, 0x0069
 2b6:	28 17       	cp	r18, r24
 2b8:	39 07       	cpc	r19, r25
 2ba:	70 f0       	brcs	.+28     	; 0x2d8 <__vector_6+0x90>

    // Set the read value
    lightTriggerReadVal = LightBuffer.buffer[LightBuffer.bufferLocation - 1];
 2bc:	e0 91 80 00 	lds	r30, 0x0080
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	e6 59       	subi	r30, 0x96	; 150
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	80 81       	ld	r24, Z
 2cc:	91 81       	ldd	r25, Z+1	; 0x01
 2ce:	90 93 67 00 	sts	0x0067, r25
 2d2:	80 93 66 00 	sts	0x0066, r24

    // Raise the interrupt pin
    sbi(PORTB, IRQ_PIN);
 2d6:	c1 9a       	sbi	0x18, 1	; 24

  }

  if (LightBuffer.bufferLocation == BUF_SIZE) {
 2d8:	80 91 80 00 	lds	r24, 0x0080
 2dc:	8a 30       	cpi	r24, 0x0A	; 10
 2de:	11 f4       	brne	.+4      	; 0x2e4 <__vector_6+0x9c>
    LightBuffer.bufferLocation = 0;
 2e0:	10 92 80 00 	sts	0x0080, r1
  }

  SoundBuffer.buffer[SoundBuffer.bufferLocation++] = analogRead(SOUND_PIN);
 2e4:	10 91 95 00 	lds	r17, 0x0095
 2e8:	c1 2f       	mov	r28, r17
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	82 df       	rcall	.-252    	; 0x1f4 <analogRead>
 2f0:	fe 01       	movw	r30, r28
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	ef 57       	subi	r30, 0x7F	; 127
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
 2fa:	91 83       	std	Z+1, r25	; 0x01
 2fc:	80 83       	st	Z, r24
 2fe:	1f 5f       	subi	r17, 0xFF	; 255
 300:	10 93 95 00 	sts	0x0095, r17

    // If a loudness trigger has been set and the level is hit
  if (soundTrigger != 0 && SoundBuffer.buffer[SoundBuffer.bufferLocation - 1] >= soundTrigger) {
 304:	80 91 64 00 	lds	r24, 0x0064
 308:	90 91 65 00 	lds	r25, 0x0065
 30c:	89 2b       	or	r24, r25
 30e:	f1 f0       	breq	.+60     	; 0x34c <__vector_6+0x104>
 310:	e0 91 95 00 	lds	r30, 0x0095
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	e1 58       	subi	r30, 0x81	; 129
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	20 81       	ld	r18, Z
 320:	31 81       	ldd	r19, Z+1	; 0x01
 322:	80 91 64 00 	lds	r24, 0x0064
 326:	90 91 65 00 	lds	r25, 0x0065
 32a:	28 17       	cp	r18, r24
 32c:	39 07       	cpc	r19, r25
 32e:	70 f0       	brcs	.+28     	; 0x34c <__vector_6+0x104>

    // Set the read value
    soundTriggerReadVal = SoundBuffer.buffer[SoundBuffer.bufferLocation - 1];
 330:	e0 91 95 00 	lds	r30, 0x0095
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	e1 58       	subi	r30, 0x81	; 129
 33c:	ff 4f       	sbci	r31, 0xFF	; 255
 33e:	80 81       	ld	r24, Z
 340:	91 81       	ldd	r25, Z+1	; 0x01
 342:	90 93 63 00 	sts	0x0063, r25
 346:	80 93 62 00 	sts	0x0062, r24

    // Raise the interrupt pin
    sbi(PORTB, IRQ_PIN);
 34a:	c1 9a       	sbi	0x18, 1	; 24
  }

  if (SoundBuffer.bufferLocation == BUF_SIZE) {
 34c:	80 91 95 00 	lds	r24, 0x0095
 350:	8a 30       	cpi	r24, 0x0A	; 10
 352:	11 f4       	brne	.+4      	; 0x358 <__vector_6+0x110>
    SoundBuffer.bufferLocation = 0;
 354:	10 92 95 00 	sts	0x0095, r1
  }
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	1f 91       	pop	r17
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_1>:

ISR(INT0_vect){
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	df 92       	push	r13
 38c:	ef 92       	push	r14
 38e:	ff 92       	push	r15
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	4f 93       	push	r20
 39a:	5f 93       	push	r21
 39c:	6f 93       	push	r22
 39e:	7f 93       	push	r23
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	dd 27       	eor	r29, r29
 3b4:	c8 51       	subi	r28, 0x18	; 24
 3b6:	cd bf       	out	0x3d, r28	; 61

  // Disable ADC timer for now
  cbi(TIMSK1, OCIE1A);
 3b8:	61 98       	cbi	0x0c, 1	; 12

  // Start up slave
  spiX_initslave(0);
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	9e de       	rcall	.-708    	; 0xfa <spiX_initslave>

  // Enable interrupts (SPI needs this)
  sei();
 3be:	78 94       	sei

  //re-enable USI
  USICR|=(1<<USIOIE)|(1<<USIWM0);
 3c0:	8d b1       	in	r24, 0x0d	; 13
 3c2:	80 65       	ori	r24, 0x50	; 80
 3c4:	8d b9       	out	0x0d, r24	; 13

  // put 'alive' bit
  spiX_put(ALIVE_CODE);
 3c6:	85 e5       	ldi	r24, 0x55	; 85
 3c8:	b6 de       	rcall	.-660    	; 0x136 <spiX_put>
  spiX_wait();
 3ca:	df de       	rcall	.-578    	; 0x18a <spiX_wait>

unsigned char spiX_get(void)

{

	return storedUSIDR;
 3cc:	10 91 96 00 	lds	r17, 0x0096
  // Grab the command
  char command = spiX_get();
  uint16_t value = -1;

  // Initialize variables
  volatile char length = 0;
 3d0:	18 8e       	std	Y+24, r1	; 0x18
  DataBuffer dataBuffer;
  volatile uint16_t trigVal = 0;
 3d2:	1f 8a       	std	Y+23, r1	; 0x17
 3d4:	1e 8a       	std	Y+22, r1	; 0x16

   // Confirm command
  spiX_put(command);
 3d6:	81 2f       	mov	r24, r17
 3d8:	ae de       	rcall	.-676    	; 0x136 <spiX_put>

  // Wait for it to be sent
  spiX_wait();
 3da:	d7 de       	rcall	.-594    	; 0x18a <spiX_wait>

  // Switch based on the command
  switch(command){
 3dc:	e1 2f       	mov	r30, r17
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	e8 30       	cpi	r30, 0x08	; 8
 3e2:	f1 05       	cpc	r31, r1
 3e4:	08 f0       	brcs	.+2      	; 0x3e8 <__vector_1+0x68>
 3e6:	97 c0       	rjmp	.+302    	; 0x516 <__vector_1+0x196>
 3e8:	ef 5e       	subi	r30, 0xEF	; 239
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	09 94       	ijmp

   // ACK command checks comms
    case ACK_CMD:

      //Send ACK code
      spiX_put(ACK_CODE);
 3ee:	83 e3       	ldi	r24, 0x33	; 51
 3f0:	0b c0       	rjmp	.+22     	; 0x408 <__vector_1+0x88>
      spiX_wait();
      break;

    // If the checksum is asked for
    case CRC_CMD:
      spiX_put((checksum >> 8) & 0xff);
 3f2:	80 91 60 00 	lds	r24, 0x0060
 3f6:	90 91 61 00 	lds	r25, 0x0061
 3fa:	89 2f       	mov	r24, r25
 3fc:	9c de       	rcall	.-712    	; 0x136 <spiX_put>
      spiX_wait();
 3fe:	c5 de       	rcall	.-630    	; 0x18a <spiX_wait>
      spiX_put((checksum >> 0) & 0xff);
 400:	80 91 60 00 	lds	r24, 0x0060
 404:	90 91 61 00 	lds	r25, 0x0061
 408:	96 de       	rcall	.-724    	; 0x136 <spiX_put>
      spiX_wait();
 40a:	bf de       	rcall	.-642    	; 0x18a <spiX_wait>
      break;
 40c:	84 c0       	rjmp	.+264    	; 0x516 <__vector_1+0x196>

    // If they want firmware version
    case FIRMWARE_CMD:
      // Send the firmware version
      spiX_put(FIRMWARE_VERSION);
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	fb cf       	rjmp	.-10     	; 0x408 <__vector_1+0x88>
    // Routine for reading buffers
    case LIGHT_CMD:
    case SOUND_CMD:

      // Grab requested buffer
      dataBuffer = bufferForCommand(command);
 412:	61 2f       	mov	r22, r17
 414:	8e 01       	movw	r16, r28
 416:	0f 5f       	subi	r16, 0xFF	; 255
 418:	1f 4f       	sbci	r17, 0xFF	; 255
 41a:	c8 01       	movw	r24, r16
 41c:	fe de       	rcall	.-516    	; 0x21a <bufferForCommand>
 41e:	80 91 96 00 	lds	r24, 0x0096
      // Grab read length
      length = spiX_get();
 422:	88 8f       	std	Y+24, r24	; 0x18

      // Echo read length
      spiX_put(length);
 424:	88 8d       	ldd	r24, Y+24	; 0x18
 426:	87 de       	rcall	.-754    	; 0x136 <spiX_put>
      // Wait for echo to complete
      spiX_wait();
 428:	b0 de       	rcall	.-672    	; 0x18a <spiX_wait>

      // Iterate through buffer
      // Potential Bug: Could read at one index past the last recorded value. may need to decrement before putting
      for(counter=0;counter<length;counter++){
 42a:	10 92 6b 00 	sts	0x006B, r1
 42e:	10 92 6a 00 	sts	0x006A, r1

         // If the buffer is at 0
         if (dataBuffer.bufferLocation == 0) {

           // Set it to the end of the buffer
           dataBuffer.bufferLocation = (BUF_SIZE-1);
 432:	89 e0       	ldi	r24, 0x09	; 9
 434:	d8 2e       	mov	r13, r24
         }

        // Decrement buffer (we read going backwards)
        dataBuffer.bufferLocation--;

        value = dataBuffer.buffer[dataBuffer.bufferLocation];
 436:	78 01       	movw	r14, r16
      // Wait for echo to complete
      spiX_wait();

      // Iterate through buffer
      // Potential Bug: Could read at one index past the last recorded value. may need to decrement before putting
      for(counter=0;counter<length;counter++){
 438:	1f c0       	rjmp	.+62     	; 0x478 <__vector_1+0xf8>

         // If the buffer is at 0
         if (dataBuffer.bufferLocation == 0) {
 43a:	8d 89       	ldd	r24, Y+21	; 0x15
 43c:	81 11       	cpse	r24, r1
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__vector_1+0xc2>

           // Set it to the end of the buffer
           dataBuffer.bufferLocation = (BUF_SIZE-1);
 440:	dd 8a       	std	Y+21, r13	; 0x15
         }

        // Decrement buffer (we read going backwards)
        dataBuffer.bufferLocation--;
 442:	8d 89       	ldd	r24, Y+21	; 0x15
 444:	81 50       	subi	r24, 0x01	; 1
 446:	8d 8b       	std	Y+21, r24	; 0x15

        value = dataBuffer.buffer[dataBuffer.bufferLocation];
 448:	ed 89       	ldd	r30, Y+21	; 0x15
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	ee 0d       	add	r30, r14
 452:	ff 1d       	adc	r31, r15
 454:	00 81       	ld	r16, Z
 456:	11 81       	ldd	r17, Z+1	; 0x01

        // Put the byte at the current location in the buffer
        spiX_put(value >> 8);
 458:	81 2f       	mov	r24, r17
 45a:	6d de       	rcall	.-806    	; 0x136 <spiX_put>

        // Wait for it to be sent
        spiX_wait();
 45c:	96 de       	rcall	.-724    	; 0x18a <spiX_wait>

        spiX_put(value & 0xFF);
 45e:	80 2f       	mov	r24, r16
 460:	6a de       	rcall	.-812    	; 0x136 <spiX_put>
        spiX_wait();
 462:	93 de       	rcall	.-730    	; 0x18a <spiX_wait>
      // Wait for echo to complete
      spiX_wait();

      // Iterate through buffer
      // Potential Bug: Could read at one index past the last recorded value. may need to decrement before putting
      for(counter=0;counter<length;counter++){
 464:	20 91 6a 00 	lds	r18, 0x006A
 468:	30 91 6b 00 	lds	r19, 0x006B
 46c:	2f 5f       	subi	r18, 0xFF	; 255
 46e:	3f 4f       	sbci	r19, 0xFF	; 255
 470:	30 93 6b 00 	sts	0x006B, r19
 474:	20 93 6a 00 	sts	0x006A, r18
 478:	20 91 6a 00 	lds	r18, 0x006A
 47c:	30 91 6b 00 	lds	r19, 0x006B
 480:	88 8d       	ldd	r24, Y+24	; 0x18
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	28 17       	cp	r18, r24
 486:	39 07       	cpc	r19, r25
 488:	c4 f2       	brlt	.-80     	; 0x43a <__vector_1+0xba>
        spiX_wait();
      }


      // Put the stop command
      spiX_put(STOP_CMD);
 48a:	86 e1       	ldi	r24, 0x16	; 22
 48c:	bd cf       	rjmp	.-134    	; 0x408 <__vector_1+0x88>

    case LIGHT_TRIGGER_CMD:
    case SOUND_TRIGGER_CMD:

      // Gather high 8 bits
      trigVal = (spiX_get() << 8);
 48e:	30 91 96 00 	lds	r19, 0x0096
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	3f 8b       	std	Y+23, r19	; 0x17
 496:	2e 8b       	std	Y+22, r18	; 0x16
      // Echo
      spiX_put(trigVal >> 8);
 498:	2e 89       	ldd	r18, Y+22	; 0x16
 49a:	3f 89       	ldd	r19, Y+23	; 0x17
 49c:	83 2f       	mov	r24, r19
 49e:	4b de       	rcall	.-874    	; 0x136 <spiX_put>
      spiX_wait();
 4a0:	74 de       	rcall	.-792    	; 0x18a <spiX_wait>

      // Gather low 8 bits
      trigVal |= (spiX_get());
 4a2:	2e 89       	ldd	r18, Y+22	; 0x16
 4a4:	3f 89       	ldd	r19, Y+23	; 0x17
 4a6:	80 91 96 00 	lds	r24, 0x0096
 4aa:	28 2b       	or	r18, r24
 4ac:	3f 8b       	std	Y+23, r19	; 0x17
 4ae:	2e 8b       	std	Y+22, r18	; 0x16
      //Echo
      spiX_put(trigVal & 0xFF);
 4b0:	8e 89       	ldd	r24, Y+22	; 0x16
 4b2:	9f 89       	ldd	r25, Y+23	; 0x17
 4b4:	40 de       	rcall	.-896    	; 0x136 <spiX_put>
      spiX_wait();
 4b6:	69 de       	rcall	.-814    	; 0x18a <spiX_wait>
    return SoundBuffer;
  }
}

volatile uint16_t *triggerValueForCommand(uint8_t command) {
  if (command == LIGHT_TRIGGER_CMD) {
 4b8:	14 30       	cpi	r17, 0x04	; 4
 4ba:	19 f4       	brne	.+6      	; 0x4c2 <__vector_1+0x142>
    return &lightTrigger;
 4bc:	e8 e6       	ldi	r30, 0x68	; 104
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__vector_1+0x146>
  }
  else {
    return &soundTrigger;
 4c2:	e4 e6       	ldi	r30, 0x64	; 100
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
      trigVal |= (spiX_get());
      //Echo
      spiX_put(trigVal & 0xFF);
      spiX_wait();

      *(triggerValueForCommand(command)) = trigVal;
 4c6:	8e 89       	ldd	r24, Y+22	; 0x16
 4c8:	9f 89       	ldd	r25, Y+23	; 0x17
 4ca:	91 83       	std	Z+1, r25	; 0x01
 4cc:	80 83       	st	Z, r24
      break;
 4ce:	23 c0       	rjmp	.+70     	; 0x516 <__vector_1+0x196>

   case TRIGGER_FETCH_CMD:
      // Put Light Trigger Val
      spiX_put(lightTriggerReadVal >> 8);
 4d0:	80 91 66 00 	lds	r24, 0x0066
 4d4:	90 91 67 00 	lds	r25, 0x0067
 4d8:	89 2f       	mov	r24, r25
 4da:	2d de       	rcall	.-934    	; 0x136 <spiX_put>

      // Wait for it to go through
      spiX_wait();
 4dc:	56 de       	rcall	.-852    	; 0x18a <spiX_wait>

      spiX_put(lightTriggerReadVal & 0xFF);
 4de:	80 91 66 00 	lds	r24, 0x0066
 4e2:	90 91 67 00 	lds	r25, 0x0067
 4e6:	27 de       	rcall	.-946    	; 0x136 <spiX_put>

      // Wait for it to go through
      spiX_wait();
 4e8:	50 de       	rcall	.-864    	; 0x18a <spiX_wait>

      // Clear it
      lightTriggerReadVal = 0;
 4ea:	10 92 67 00 	sts	0x0067, r1
 4ee:	10 92 66 00 	sts	0x0066, r1

      // Put Loudnesss Trigger Val
      spiX_put(soundTriggerReadVal >> 8);
 4f2:	80 91 62 00 	lds	r24, 0x0062
 4f6:	90 91 63 00 	lds	r25, 0x0063
 4fa:	89 2f       	mov	r24, r25
 4fc:	1c de       	rcall	.-968    	; 0x136 <spiX_put>

      // Wait for it to be sent
      spiX_wait();
 4fe:	45 de       	rcall	.-886    	; 0x18a <spiX_wait>

        // Put Loudnesss Trigger Val
      spiX_put(soundTriggerReadVal & 0xFF);
 500:	80 91 62 00 	lds	r24, 0x0062
 504:	90 91 63 00 	lds	r25, 0x0063
 508:	16 de       	rcall	.-980    	; 0x136 <spiX_put>

      // Wait for it to go through
      spiX_wait();
 50a:	3f de       	rcall	.-898    	; 0x18a <spiX_wait>

      // Clear it
      soundTriggerReadVal = 0;
 50c:	10 92 63 00 	sts	0x0063, r1
 510:	10 92 62 00 	sts	0x0062, r1

      // Clear IRQ
      cbi(PORTB, IRQ_PIN);
 514:	c1 98       	cbi	0x18, 1	; 24

      break;
 }

  // Disable USI
  USICR&= ~(1<<USIOIE);
 516:	6e 98       	cbi	0x0d, 6	; 13
  USICR&= ~(1<<USIWM0);
 518:	6c 98       	cbi	0x0d, 4	; 13

  cbi(DDRA, MOSI);
 51a:	d6 98       	cbi	0x1a, 6	; 26
  cbi(DDRA, MISO);
 51c:	d5 98       	cbi	0x1a, 5	; 26

  // Re-enable ADC reads
  sbi(TIMSK1, OCIE1A);
 51e:	61 9a       	sbi	0x0c, 1	; 12
}
 520:	c8 5e       	subi	r28, 0xE8	; 232
 522:	cd bf       	out	0x3d, r28	; 61
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	df 90       	pop	r13
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <crc16>:
      unsigned char i;
      unsigned int data;
      unsigned int crc = 0xffff;
      char *data_p = 0x0000;

      if (length == 0)
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	11 f1       	breq	.+68     	; 0x59c <crc16+0x48>

  // Re-enable ADC reads
  sbi(TIMSK1, OCIE1A);
}

unsigned short crc16( unsigned short length)
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	3f ef       	ldi	r19, 0xFF	; 255

      if (length == 0)
            return (~crc);
      do
      {
            for (i=0, data= pgm_read_byte(data_p++);
 560:	fa 01       	movw	r30, r20
 562:	4f 5f       	subi	r20, 0xFF	; 255
 564:	5f 4f       	sbci	r21, 0xFF	; 255
 566:	e4 91       	lpm	r30, Z
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	a8 e0       	ldi	r26, 0x08	; 8
                 i < 8;
                 i++, data >>= 1)
            {
                  if ((crc & 0x0001) ^ (data & 0x0001))
 56c:	b9 01       	movw	r22, r18
 56e:	6e 27       	eor	r22, r30
 570:	7f 27       	eor	r23, r31
 572:	36 95       	lsr	r19
 574:	27 95       	ror	r18
 576:	60 ff       	sbrs	r22, 0
 578:	04 c0       	rjmp	.+8      	; 0x582 <crc16+0x2e>
                        crc = (crc >> 1) ^ POLY;
 57a:	68 e0       	ldi	r22, 0x08	; 8
 57c:	26 27       	eor	r18, r22
 57e:	64 e8       	ldi	r22, 0x84	; 132
 580:	36 27       	eor	r19, r22
            return (~crc);
      do
      {
            for (i=0, data= pgm_read_byte(data_p++);
                 i < 8;
                 i++, data >>= 1)
 582:	f6 95       	lsr	r31
 584:	e7 95       	ror	r30
 586:	a1 50       	subi	r26, 0x01	; 1

      if (length == 0)
            return (~crc);
      do
      {
            for (i=0, data= pgm_read_byte(data_p++);
 588:	89 f7       	brne	.-30     	; 0x56c <crc16+0x18>
            {
                  if ((crc & 0x0001) ^ (data & 0x0001))
                        crc = (crc >> 1) ^ POLY;
                  else  crc >>= 1;
            }
      } while (--length);
 58a:	48 17       	cp	r20, r24
 58c:	59 07       	cpc	r21, r25
 58e:	41 f7       	brne	.-48     	; 0x560 <crc16+0xc>
      crc = ~crc;
 590:	20 95       	com	r18
 592:	30 95       	com	r19
      data = crc;
      crc = (crc << 8) | (data >> 8 & 0xff);
 594:	32 27       	eor	r19, r18
 596:	23 27       	eor	r18, r19
 598:	32 27       	eor	r19, r18

      return (crc);
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <crc16+0x4c>
      unsigned int data;
      unsigned int crc = 0xffff;
      char *data_p = 0x0000;

      if (length == 0)
            return (~crc);
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	30 e0       	ldi	r19, 0x00	; 0
      crc = ~crc;
      data = crc;
      crc = (crc << 8) | (data >> 8 & 0xff);

      return (crc);
}
 5a0:	c9 01       	movw	r24, r18
 5a2:	08 95       	ret

000005a4 <main>:


extern void _exit();

int main(void) {
  checksum = crc16( (unsigned short) _exit << 1 );
 5a4:	8d ed       	ldi	r24, 0xDD	; 221
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	d3 df       	rcall	.-90     	; 0x554 <crc16>
 5ae:	90 93 61 00 	sts	0x0061, r25
 5b2:	80 93 60 00 	sts	0x0060, r24

  setup();
 5b6:	13 de       	rcall	.-986    	; 0x1de <setup>
 5b8:	ff cf       	rjmp	.-2      	; 0x5b8 <main+0x14>

000005ba <_exit>:
 5ba:	f8 94       	cli

000005bc <__stop_program>:
 5bc:	ff cf       	rjmp	.-2      	; 0x5bc <__stop_program>
